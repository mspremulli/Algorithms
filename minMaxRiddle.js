function riddle(arr) {
  let minValueDistance = [];

  //push initial values in array of objects
  arr.forEach(number => {
    minValueDistance.push({value: number, distance: -1})
  });

  //count distances and push into array of objects
  minValueDistance.forEach((item, index) => {
    let i = index,
        j = index;
      //count to the right
      while(item.value <= arr[i]){
        item.distance++;
        i++;
      }
      //count to the left
      while(item.value <= arr[j]){
        item.distance++;
        j--;
      }
  });
  // console.log(minValueDistance);


  // build maximum object
  let maxDistance = [],
      maxValue;
  for(let windowSize = 1; windowSize <= arr.length; windowSize++){
    maxValue = 0;
    minValueDistance.forEach(item => {
      if(item.value > maxValue && item.distance >= windowSize){
        maxValue = item.value;
      }
    });
    maxDistance.push(maxValue);
  }

  return maxDistance;
}

// console.log(riddle([3, 5, 4, 7, 6, 2]));
// console.log(riddle([6,3,5,1,12]));
console.log(riddle([789168277,694294362,532144299,20472621,316665904,59654039,685958445,925819184,371690486,285650353,522515445,624800694,396417773,467681822,964079876,355847868,424895284,50621903,728094833,535436067,221600465,832169804,641711594,518285605,235027997,904664230,223080251,337085579,5125280,448775176,831453463,550142629,822686012,555190916,911857735,144603739,751265137,274554418,450666269,984349810,716998518,949717950,313190920,600769443,140712186,218387168,416515873,194487510,149671312,241556542,575727819,873823206]));


// 3 5 4 7 6 2
// {3:0,4} {5:0,0} {4:1,2} {7:0,0} {6:1,0} {2:5,0}
// {3:5} {5:1} {4:4} {7:1} {6:2} {2:6}
// {1:7, 2:6, 3:4 ,4:4, 5:3, 6:2}
// [7,6,4,4,3,2]


//984349810, 694294362, 716998518, 450666269,
// 550142629, 448775176, 355847868, 274554418,
// 221600465, 221600465, 285650353,  59654039,
//  59654039, 144603739, 144603739, 140712186,
// 140712186, 140712186, 140712186, 140712186,
// 140712186, 140712186, 140712186,  50621903,
//  20472621,  20472621,  20472621,  20472621,
//   5125280,   5125280,   5125280,   5125280,
//   5125280,   5125280,   5125280,   5125280,
//   5125280,   5125280,   5125280,   5125280,
//   5125280,   5125280,   5125280,   5125280,
//   5125280,   5125280,   5125280,   5125280,
//   5125280,   5125280,   5125280,   5125280

// 984349810, 716998518, 716998518, 550142629,
//   550142629, 448775176, 355847868, 285650353,
//   285650353, 285650353, 285650353, 144603739,
//   144603739, 144603739, 144603739, 140712186,
//   140712186, 140712186, 140712186, 140712186,
//   140712186, 140712186, 140712186,  50621903,
//    20472621,  20472621,  20472621,  20472621,
//     5125280,   5125280,   5125280,   5125280,
//     5125280,   5125280,   5125280,   5125280,
//     5125280,   5125280,   5125280,   5125280,
//     5125280,   5125280,   5125280,   5125280,
//     5125280,   5125280,   5125280,   5125280,
//     5125280,   5125280,   5125280,   5125280
//984349810 716998518 716998518 550142629 550142629 448775176 355847868 285650353 285650353 285650353 285650353 144603739 144603739 144603739 144603739 140712186 140712186 140712186 140712186 140712186 140712186 140712186 140712186 50621903 20472621 20472621 20472621 20472621 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 5125280 